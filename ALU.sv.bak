`timescale 1ns / 1ps
module ALU#(
        parameter DATA_WIDTH = 32,
        parameter OPCODE_LENGTH = 4
        )(
        input logic [DATA_WIDTH-1:0]    SrcA,
        input logic [DATA_WIDTH-1:0]    SrcB,

        input logic [OPCODE_LENGTH-1:0]    Operation,
        output logic[DATA_WIDTH-1:0] ALUResult,
        output logic nagative,
        output logic zero
        );
		  integer      i;
        always_comb
        begin
            ALUResult = 'd0;
            
            
            zero = 'b0;
            case(Operation)
            4'b0000:        // AND
                    ALUResult = SrcA & SrcB;
            4'b0001:        //OR
                    ALUResult = SrcA | SrcB;
            4'b0011:        //XOR
                    ALUResult = SrcA ^ SrcB;
            4'b0010:        //ADD
                    ALUResult = SrcA + SrcB;
            4'b0110: begin       //Subtract
                    ALUResult = $signed(SrcA) - $signed(SrcB);
                    negative=($signed(ALUResult)<0);
                    zero = ($signed(ALUResult) == $signed(1'd0));
                    end
           
            default: 
                    ALUResult = 'b0;
            endcase
        end
endmodule


		  
